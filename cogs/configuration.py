import discord
from discord.ext import commands
from discord import app_commands
from utils.embeds import EmbedBuilder
from utils.checks import is_admin, is_moderator
from typing import Literal

class Configuration(commands.Cog):
    """Module de configuration du bot"""
    
    def __init__(self, bot):
        self.bot = bot
    
    @app_commands.command(name="panel", description="Panneau de configuration interactif du serveur")
    @app_commands.default_permissions(administrator=True)
    async def panel(self, interaction: discord.Interaction):
        """Panneau de configuration interactif"""
        embed = discord.Embed(
            title="‚öôÔ∏è Panneau de Configuration",
            description="Utilisez les boutons ci-dessous pour configurer le bot sur votre serveur.",
            color=0x00ff00,
            timestamp=discord.utils.utcnow()
        )
        
        embed.add_field(
            name="üõ†Ô∏è Configuration Rapide",
            value="Configurez les param√®tres essentiels du bot",
            inline=False
        )
        
        view = ConfigPanelView(self.bot, interaction.user)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)

    @app_commands.command(name="config", description="Afficher la configuration actuelle du serveur")
    @is_moderator()
    async def config(self, interaction: discord.Interaction):
        """Affiche la configuration actuelle du serveur"""
        config = self.bot.config.get_guild_config(interaction.guild.id)
        
        embed = discord.Embed(
            title="‚öôÔ∏è Configuration du Serveur",
            color=0x00ff00,
            timestamp=discord.utils.utcnow()
        )
        
        # Canal de logs
        logs_channel_id = config.get('logs_channel')
        logs_channel = interaction.guild.get_channel(logs_channel_id) if logs_channel_id else None
        embed.add_field(
            name="üìã Canal de Logs",
            value=logs_channel.mention if logs_channel else "*Non configur√©*",
            inline=True
        )
        
        # R√¥le de mod√©rateur
        mod_role_id = config.get('mod_role')
        mod_role = interaction.guild.get_role(mod_role_id) if mod_role_id else None
        embed.add_field(
            name="üëÆ R√¥le Mod√©rateur",
            value=mod_role.mention if mod_role else "*Non configur√©*",
            inline=True
        )
        
        # R√¥le de mute
        mute_role_id = config.get('mute_role')
        mute_role = interaction.guild.get_role(mute_role_id) if mute_role_id else None
        embed.add_field(
            name="üîá R√¥le Mute",
            value=mute_role.mention if mute_role else "*Non configur√©*",
            inline=True
        )
        
        # Configuration anti-spam
        auto_mod = config.get('auto_mod', {})
        anti_spam_status = "‚úÖ Activ√©" if auto_mod.get('anti_spam', True) else "‚ùå D√©sactiv√©"
        anti_links_status = "‚úÖ Activ√©" if auto_mod.get('anti_links', True) else "‚ùå D√©sactiv√©"
        
        embed.add_field(
            name="üõ°Ô∏è Anti-Spam",
            value=f"{anti_spam_status}\nLimite: {auto_mod.get('message_limit', 5)} msg/{auto_mod.get('time_window', 10)}s",
            inline=True
        )
        
        embed.add_field(
            name="üîó Anti-Liens",
            value=anti_links_status,
            inline=True
        )
        
        embed.add_field(
            name="üì¢ Max Mentions",
            value=str(auto_mod.get('max_mentions', 5)),
            inline=True
        )
        
        # Statut du bot
        status_config = config.get('status', {})
        embed.add_field(
            name="ü§ñ Statut du Bot",
            value=f"Type: {status_config.get('type', 'watching')}\nTexte: {status_config.get('text', 'üõ°Ô∏è Prot√©ger le serveur')}",
            inline=False
        )
        
        embed.set_footer(text=f"Serveur: {interaction.guild.name}")
        
        await interaction.response.send_message(embed=embed)
    
    @app_commands.command(name="setlogs", description="Configurer le canal de logs")
    @app_commands.describe(channel="Le canal pour les logs")
    @is_admin()
    async def setlogs(self, interaction: discord.Interaction, channel: discord.TextChannel):
        """Configure le canal de logs"""
        self.bot.config.set_guild_setting(interaction.guild.id, 'logs_channel', channel.id)
        
        embed = EmbedBuilder.success(
            "Canal de logs configur√©",
            f"Le canal {channel.mention} a √©t√© d√©fini comme canal de logs.",
            interaction.user
        )
        await interaction.response.send_message(embed=embed)
    
    @app_commands.command(name="setmodrole", description="Configurer le r√¥le de mod√©rateur")
    @app_commands.describe(role="Le r√¥le de mod√©rateur")
    @is_admin()
    async def setmodrole(self, interaction: discord.Interaction, role: discord.Role):
        """Configure le r√¥le de mod√©rateur"""
        self.bot.config.set_guild_setting(interaction.guild.id, 'mod_role', role.id)
        
        embed = EmbedBuilder.success(
            "R√¥le de mod√©rateur configur√©",
            f"Le r√¥le {role.mention} a √©t√© d√©fini comme r√¥le de mod√©rateur.",
            interaction.user
        )
        await interaction.response.send_message(embed=embed)
    
    @app_commands.command(name="setmuterole", description="Configurer le r√¥le de mute")
    @app_commands.describe(role="Le r√¥le de mute")
    @is_admin()
    async def setmuterole(self, interaction: discord.Interaction, role: discord.Role):
        """Configure le r√¥le de mute"""
        self.bot.config.set_guild_setting(interaction.guild.id, 'mute_role', role.id)
        
        embed = EmbedBuilder.success(
            "R√¥le de mute configur√©",
            f"Le r√¥le {role.mention} a √©t√© d√©fini comme r√¥le de mute.",
            interaction.user
        )
        await interaction.response.send_message(embed=embed)
    
    @app_commands.command(name="antispam", description="Configurer l'anti-spam")
    @app_commands.describe(
        enabled="Activer ou d√©sactiver l'anti-spam",
        message_limit="Nombre maximum de messages",
        time_window="Fen√™tre de temps en secondes"
    )
    @is_admin()
    async def antispam(self, interaction: discord.Interaction, enabled: bool, 
                      message_limit: int = 5, time_window: int = 10):
        """Configure l'anti-spam"""
        if message_limit < 1 or message_limit > 20:
            embed = EmbedBuilder.error("Param√®tre invalide", "La limite de messages doit √™tre entre 1 et 20.")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        if time_window < 5 or time_window > 60:
            embed = EmbedBuilder.error("Param√®tre invalide", "La fen√™tre de temps doit √™tre entre 5 et 60 secondes.")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        self.bot.config.set_guild_setting(interaction.guild.id, 'auto_mod.anti_spam', enabled)
        self.bot.config.set_guild_setting(interaction.guild.id, 'auto_mod.message_limit', message_limit)
        self.bot.config.set_guild_setting(interaction.guild.id, 'auto_mod.time_window', time_window)
        
        status = "activ√©" if enabled else "d√©sactiv√©"
        embed = EmbedBuilder.success(
            "Anti-spam configur√©",
            f"L'anti-spam a √©t√© **{status}**.\nLimite: {message_limit} messages par {time_window} secondes.",
            interaction.user
        )
        await interaction.response.send_message(embed=embed)
    
    @app_commands.command(name="antilinks", description="Configurer l'anti-liens")
    @app_commands.describe(enabled="Activer ou d√©sactiver l'anti-liens")
    @is_admin()
    async def antilinks(self, interaction: discord.Interaction, enabled: bool):
        """Configure l'anti-liens"""
        self.bot.config.set_guild_setting(interaction.guild.id, 'auto_mod.anti_links', enabled)
        
        status = "activ√©" if enabled else "d√©sactiv√©"
        embed = EmbedBuilder.success(
            "Anti-liens configur√©",
            f"L'anti-liens a √©t√© **{status}**.",
            interaction.user
        )
        await interaction.response.send_message(embed=embed)
    
    @app_commands.command(name="maxmentions", description="Configurer le nombre maximum de mentions")
    @app_commands.describe(limit="Nombre maximum de mentions par message")
    @is_admin()
    async def maxmentions(self, interaction: discord.Interaction, limit: int):
        """Configure le nombre maximum de mentions"""
        if limit < 1 or limit > 20:
            embed = EmbedBuilder.error("Param√®tre invalide", "La limite de mentions doit √™tre entre 1 et 20.")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        self.bot.config.set_guild_setting(interaction.guild.id, 'auto_mod.max_mentions', limit)
        
        embed = EmbedBuilder.success(
            "Limite de mentions configur√©e",
            f"Le nombre maximum de mentions par message a √©t√© d√©fini √† **{limit}**.",
            interaction.user
        )
        await interaction.response.send_message(embed=embed)
    
    @app_commands.command(name="setstatus", description="Configurer le statut du bot")
    @app_commands.describe(
        activity_type="Type d'activit√©",
        text="Texte du statut"
    )
    @is_admin()
    async def setstatus(self, interaction: discord.Interaction, 
                       activity_type: Literal['playing', 'watching', 'listening', 'streaming'], 
                       text: str):
        """Configure le statut du bot"""
        if len(text) > 128:
            embed = EmbedBuilder.error("Texte trop long", "Le texte du statut ne peut pas d√©passer 128 caract√®res.")
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        # Mapper les types d'activit√©
        activity_map = {
            'playing': discord.ActivityType.playing,
            'watching': discord.ActivityType.watching,
            'listening': discord.ActivityType.listening,
            'streaming': discord.ActivityType.streaming
        }
        
        activity = discord.Activity(type=activity_map[activity_type], name=text)
        
        try:
            await self.bot.change_presence(activity=activity, status=discord.Status.online)
            
            # Sauvegarder la configuration
            self.bot.config.set_guild_setting(interaction.guild.id, 'status.type', activity_type)
            self.bot.config.set_guild_setting(interaction.guild.id, 'status.text', text)
            
            embed = EmbedBuilder.success(
                "Statut configur√©",
                f"Le statut du bot a √©t√© d√©fini sur:\n**{activity_type.capitalize()}** {text}",
                interaction.user
            )
            await interaction.response.send_message(embed=embed)
            
        except Exception as e:
            embed = EmbedBuilder.error("Erreur", f"Impossible de changer le statut: {str(e)}")
            await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @app_commands.command(name="resetconfig", description="R√©initialiser la configuration du serveur")
    @is_admin()
    async def resetconfig(self, interaction: discord.Interaction):
        """R√©initialise la configuration du serveur"""
        # Demander confirmation
        embed = EmbedBuilder.warning(
            "Confirmation requise",
            "√ätes-vous s√ªr de vouloir r√©initialiser toute la configuration du serveur?\n\n**Cette action est irr√©versible!**"
        )
        
        view = ConfirmView(interaction.user)
        await interaction.response.send_message(embed=embed, view=view, ephemeral=True)
        
        # Attendre la r√©ponse
        await view.wait()
        
        if view.value is None:
            embed = EmbedBuilder.error("Timeout", "Temps d'attente d√©pass√©. Action annul√©e.")
            await interaction.edit_original_response(embed=embed, view=None)
        elif view.value:
            # R√©initialiser la configuration
            if interaction.guild.id in self.bot.config.guilds_config:
                del self.bot.config.guilds_config[interaction.guild.id]
            
            embed = EmbedBuilder.success(
                "Configuration r√©initialis√©e",
                "La configuration du serveur a √©t√© r√©initialis√©e aux valeurs par d√©faut.",
                interaction.user
            )
            await interaction.edit_original_response(embed=embed, view=None)
        else:
            embed = EmbedBuilder.info("Action annul√©e", "La r√©initialisation a √©t√© annul√©e.")
            await interaction.edit_original_response(embed=embed, view=None)

class ConfirmView(discord.ui.View):
    """Vue de confirmation pour les actions importantes"""
    
    def __init__(self, user: discord.Member):
        super().__init__(timeout=30)
        self.user = user
        self.value = None
    
    @discord.ui.button(label="‚úÖ Confirmer", style=discord.ButtonStyle.danger)
    async def confirm(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.user:
            await interaction.response.send_message("‚ùå Vous ne pouvez pas utiliser ce bouton.", ephemeral=True)
            return
        
        self.value = True
        self.stop()
    
    @discord.ui.button(label="‚ùå Annuler", style=discord.ButtonStyle.secondary)
    async def cancel(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.user:
            await interaction.response.send_message("‚ùå Vous ne pouvez pas utiliser ce bouton.", ephemeral=True)
            return
        
        self.value = False
        self.stop()

class ConfigPanelView(discord.ui.View):
    """Vue pour le panneau de configuration interactif"""
    
    def __init__(self, bot, user):
        super().__init__(timeout=300)
        self.bot = bot
        self.user = user
    
    @discord.ui.button(label="üìã Voir Config", style=discord.ButtonStyle.secondary, emoji="üìã")
    async def view_config(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.user:
            await interaction.response.send_message("‚ùå Vous ne pouvez pas utiliser ce bouton.", ephemeral=True)
            return
        
        config = self.bot.config.get_guild_config(interaction.guild.id)
        
        embed = discord.Embed(
            title="‚öôÔ∏è Configuration Actuelle",
            color=0x00ff00,
            timestamp=discord.utils.utcnow()
        )
        
        # Canal de logs
        logs_channel_id = config.get('logs_channel')
        logs_channel = interaction.guild.get_channel(logs_channel_id) if logs_channel_id else None
        embed.add_field(
            name="üìã Canal de Logs",
            value=logs_channel.mention if logs_channel else "*Non configur√©*",
            inline=True
        )
        
        # R√¥le de mod√©rateur
        mod_role_id = config.get('mod_role')
        mod_role = interaction.guild.get_role(mod_role_id) if mod_role_id else None
        embed.add_field(
            name="üëÆ R√¥le Mod√©rateur",
            value=mod_role.mention if mod_role else "*Non configur√©*",
            inline=True
        )
        
        # Anti-spam
        auto_mod = config.get('auto_mod', {})
        anti_spam_status = "‚úÖ Activ√©" if auto_mod.get('anti_spam', True) else "‚ùå D√©sactiv√©"
        embed.add_field(
            name="üõ°Ô∏è Anti-Spam",
            value=f"{anti_spam_status}\n{auto_mod.get('message_limit', 5)} msg/{auto_mod.get('time_window', 10)}s",
            inline=True
        )
        
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @discord.ui.button(label="üõ°Ô∏è Anti-Spam", style=discord.ButtonStyle.primary, emoji="üõ°Ô∏è")
    async def toggle_antispam(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.user:
            await interaction.response.send_message("‚ùå Vous ne pouvez pas utiliser ce bouton.", ephemeral=True)
            return
        
        current = self.bot.config.get_guild_setting(interaction.guild.id, 'auto_mod.anti_spam', True)
        new_value = not current
        self.bot.config.set_guild_setting(interaction.guild.id, 'auto_mod.anti_spam', new_value)
        
        status = "activ√©" if new_value else "d√©sactiv√©"
        embed = EmbedBuilder.success(
            "Anti-spam modifi√©",
            f"L'anti-spam est maintenant **{status}**."
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @discord.ui.button(label="üîó Anti-Liens", style=discord.ButtonStyle.primary, emoji="üîó")
    async def toggle_antilinks(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.user:
            await interaction.response.send_message("‚ùå Vous ne pouvez pas utiliser ce bouton.", ephemeral=True)
            return
        
        current = self.bot.config.get_guild_setting(interaction.guild.id, 'auto_mod.anti_links', True)
        new_value = not current
        self.bot.config.set_guild_setting(interaction.guild.id, 'auto_mod.anti_links', new_value)
        
        status = "activ√©" if new_value else "d√©sactiv√©"
        embed = EmbedBuilder.success(
            "Anti-liens modifi√©",
            f"L'anti-liens est maintenant **{status}**."
        )
        await interaction.response.send_message(embed=embed, ephemeral=True)
    
    @discord.ui.button(label="ü§ñ Statut Bot", style=discord.ButtonStyle.success, emoji="ü§ñ")
    async def change_status(self, interaction: discord.Interaction, button: discord.ui.Button):
        if interaction.user != self.user:
            await interaction.response.send_message("‚ùå Vous ne pouvez pas utiliser ce bouton.", ephemeral=True)
            return
        
        modal = StatusModal(self.bot)
        await interaction.response.send_modal(modal)

class StatusModal(discord.ui.Modal, title="ü§ñ Changer le Statut du Bot"):
    """Modal pour changer le statut du bot"""
    
    def __init__(self, bot):
        super().__init__()
        self.bot = bot
    
    activity_type = discord.ui.TextInput(
        label="Type d'activit√©",
        placeholder="playing, watching, listening, streaming",
        default="watching",
        max_length=20
    )
    
    activity_text = discord.ui.TextInput(
        label="Texte du statut",
        placeholder="üõ°Ô∏è Prot√©ger le serveur",
        default="üõ°Ô∏è Prot√©ger le serveur",
        max_length=128
    )
    
    async def on_submit(self, interaction: discord.Interaction):
        activity_types = {
            'playing': discord.ActivityType.playing,
            'watching': discord.ActivityType.watching,
            'listening': discord.ActivityType.listening,
            'streaming': discord.ActivityType.streaming
        }
        
        activity_type_str = self.activity_type.value.lower()
        if activity_type_str not in activity_types:
            embed = EmbedBuilder.error(
                "Type invalide",
                "Types valides: playing, watching, listening, streaming"
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
            return
        
        try:
            activity = discord.Activity(
                type=activity_types[activity_type_str],
                name=self.activity_text.value
            )
            await self.bot.change_presence(activity=activity, status=discord.Status.online)
            
            embed = EmbedBuilder.success(
                "Statut modifi√©",
                f"Nouveau statut: **{activity_type_str.capitalize()}** {self.activity_text.value}"
            )
            await interaction.response.send_message(embed=embed, ephemeral=True)
        except Exception as e:
            embed = EmbedBuilder.error("Erreur", f"Impossible de changer le statut: {str(e)}")
            await interaction.response.send_message(embed=embed, ephemeral=True)

async def setup(bot):
    await bot.add_cog(Configuration(bot))
